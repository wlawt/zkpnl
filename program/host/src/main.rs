// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    PROGRAM_ELF, PROGRAM_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use sha2::{Digest, Sha256};
use std::env;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let args: Vec<String> = env::args().collect();


    // For example:
    let entry: f32 = args[1].parse().expect("Invalid number for entry");
    let current: f32 = args[2].parse().expect("Invalid number for current");
    let pnl: f32 = args[3].parse().expect("Invalid number for pnl");
    let inputs = vec![entry, current, pnl];
    

    let env = ExecutorEnv::builder()
        .write(&inputs)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, PROGRAM_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let output: bool = receipt.journal.decode().unwrap();

    println!("output: {}", output);

    let mut hasher = Sha256::new();
    let data = &receipt.journal.bytes;
    hasher.update(data);
    println!("proof hash: {:x}", hasher.finalize());

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(PROGRAM_ID)
        .unwrap();
}
